#! /usr/bin/env python2.7
from __future__ import print_function

prog_info = '''
==========================================================================

   SHarPO (Spherical Harmonics Projected molecular Orbitals)
   
   License
   :: Copyright (c) 2016 by Lukas Hammerschmidt
      l.hammerschmidt@auckland.ac.nz

   :: This program is free software: you can redistribute it and/or
      modify it under the terms of the GNU Lesser General Public 
      License as published by the Free Software Foundation, either
      version 3 of the License, or any later version.

   :: This program is distributed in the hope that it will be useful,
      but WITHOUT ANY WARRANTY; without even the implied warranty of
      MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
      GNU Lesser General Public License for more details. You should
      have received a copy of the GNU Lesser General Public License
      along with sharpo.  If not, see <http://www.gnu.org/licenses/>.

   Purpose
   :: Projects the molecular orbitals onto spherical harmonics
      according to suppl. info. of J. Phys. Chem. C Lett 2009, 
      113, 5035-5038
   
   Comments
   :: Runs currently only with Python 2.7 on my mashine. Not sure
      what the problem is. Orbkit is supposed to run with Python 3.
   :: This programs needs the modules: "Orbkit" and "Cubature
      (for Python)" installed!!!

   How to cite
   :: This program uses "Orbkit" and "Cubature", which need to be
      cited.
      Orbkit :: G. Hermann, V. Pohl, J.C. Tremblay, B. Paulus, 
                H.-C. Hege, and A. Schild, "ORBKIT: A Modular Python
                Toolbox for Cross-Platform Postprocessing of Quantum
                Chemical Wavefunction Data", J. Comput. Chem. 2016,
                DOI:10.1002/jcc.24358

   Last Changed
   23.01.2017 :: Added MO coefficients and a whole other stuff
   23.09.2016 :: No distinction between spin up,down in smearing <- fixed
   15.09.2016 :: Changed start and end energies for g-smearing
   14.09.2016 :: Gaussian smearing
   13.09.2016 :: Comments + Parameter passing

==========================================================================
'''

from orbkit import read,core,grid,options, extras
import numpy
import sys
import time
import os
import errno

import sh
import arghandler
import mo_coefficients


#---------------------------------
# PROGRAM VERSION::
#---------------------------------
version = "0.3.4"

#---------------------------------
# Check arguments
#---------------------------------
args_list = arghandler.get_parser(version, prog_info)

input_file   = args_list[0]              #: input name
cutoff_r     = float(args_list[1])       #: radius upto where will be integrated
itype        = args_list[2]              #: input type [molden, gaussian, ...]
numproc      = args_list[3]              #: number of subprocesses.
center_shift = numpy.array([float(args_list[4]), float(args_list[5]), float(args_list[6])])
                                         #: center coordinates
output_file  = args_list[7]              #: output file string
sigma        = args_list[9]              #: smearing factor
pointsPerEv  = args_list[10]             #: number of gaussian smearing grid points per 1 eV
print_coeff  = args_list[11]             #: if true -> writes the coefficients into a folder
print_coeff_only  = args_list[12]        #: if true -> writes the coefficients into a folder
efermi_shift = args_list[13]             #: if true -> writes the coefficients into a folder
emin         = args_list[14]             #: sets a minimum for the energy range of MOs to consider
emax         = args_list[15]             #: sets a maximum for the energy range of MOs to consider
energy_range_is_set = args_list[16]      #: True -> use Emax und Emin; False -> don't use them
mo_en_only   = args_list[17]             #: True -> prints MO energies and stops

#---------------------------
# change float input to a.u.
#---
ang2au = 1./0.52917720859
# according to nist the value would be: 0.52917721067
# I am taking the orbkit value for consistency :(
if args_list[8] == "A":
  center_shift = center_shift * ang2au
  cutoff_r = cutoff_r * ang2au

print ('')
print ('Input File          : %s' % input_file.strip())
print ('File Format         : %s' % itype.strip())
print ('Output File         : %s' % output_file)
print ('')
print ('Cutoff Radius [Ang] : %s' % str(cutoff_r/ang2au).strip())
print ('Center [Ang]        : %s %s %s' % (str(center_shift[0]/ang2au), str(center_shift[1]/ang2au), str(center_shift[2]/ang2au)))
print ('Smearing            : %s' % str(sigma))
print ('#ofSmPoints         : %s' % str(pointsPerEv))
if print_coeff_only:
  print ('Print coefficients  : only')
else:
  print ('Print coefficients  : %s' % str(print_coeff))

#--------------------------------------
# Parameters for time measurements
#--------------------------------------
elapsed_time = [.0,.0,.0]               # [0] : Calculation of integrals
                                        # [1] : Writing to disc
                                        # [2] : calculation of coefficients

#--------------------------------------
# Parameters for orbkit initialization
#--------------------------------------
slice_length = 1e4                      #: Specifies number of points per subprocess.
options.quiet = True                    #: No output by orbkit
options.no_log = True                   #: no log-file will be made


#--------------------------------------------
# orbkit reads input file
# wavefunction data is saved in object "qc"
#--------------------------------------------
qc = read.main_read(input_file,itype,all_mo=True)
min_MO_energy = min(item['energy'] for item in qc.mo_spec)*27.21138602    # lowest MO
max_MO_energy = max(item['energy'] for item in qc.mo_spec)*27.21138602    # highest MO

#--------------------------------------------
# if this option is set, sharpo prints the
# MO energies only and stops
#--------------------------------------------
if (mo_en_only):
  print ()
  for i in xrange(0,len(qc.mo_spec)):
    print ("Orbital Number = %i    E[eV] = %.3f" % (i+1, qc.mo_spec[i]['energy']*27.21138602))
  sys.exit()
    

#---------------------------------------
# Calculates E_HOMO (~E_Fermi) if set true
# for comparison with solid state values
# and shifts energies accordingly
#---------------------------------------
if efermi_shift:
  E_Fermi = min(item['energy'] for item in qc.mo_spec)          #: init E_Fermi with lowest energy
  E_LUMO = max(item['energy'] for item in qc.mo_spec)           #: init E_LUMO the lowest energy
  for mo in range (0, len(qc.mo_spec)):
    if (qc.mo_spec[mo]['occ_num'] > 0.0001 and qc.mo_spec[mo]['energy'] > E_Fermi):
      E_Fermi = qc.mo_spec[mo]['energy']
    if (qc.mo_spec[mo]['occ_num'] < 0.0001 and qc.mo_spec[mo]['energy'] < E_LUMO):
      E_LUMO = qc.mo_spec[mo]['energy']
  E_Fermi = E_Fermi*27.21138602
  print ('E_Fermi [eV]        : %.4f' % E_Fermi)
else:
  E_Fermi = 0.0

emin += E_Fermi
emax += E_Fermi

if not energy_range_is_set:                                     #: The full energy range is taken
  emin = min_MO_energy - 2.*sigma*27.21138602
  emax = max_MO_energy + 2.*sigma*27.21138602
  

#--------------------------------------------
# selected Orbitals in the energy region
# between Emax and Emin are saved into
# mo_select (python-list)
#--------------------------------------------
print ('E-range [eV]        : %.2f to %.2f' % (emin, emax))     #: if no range was set, automatically the highest
                                                                #  and lowest MO energies are taken as range
selected_MO = []
for i in xrange(0, len(qc.mo_spec)):
  if (qc.mo_spec[i]['energy'] >= emin/27.21138602-0.001 and qc.mo_spec[i]['energy'] <= emax/27.21138602+0.001):
    selected_MO.append(i+1)

if not selected_MO:                                             #: if there are no MOs in the specified E-range
  print ()                                                      #  sharpo prints the MO:energy list and stops
  for i in xrange(0, len(qc.mo_spec)):
    print ("Orbital Number = %i    E[eV] = %.3f" % (i+1, qc.mo_spec[i]['energy']*27.21138602))
  print ()
  print ("There are no orbitals in your chosen energy range (Please see above!)")
  print ("Either increase the energy range or don't specify it at all.")
  print ()
  sys.exit()
else:
  print ()
  print ("Found %i MOs in your energy range." % (len(selected_MO)))




#--------------------------------------------
# Convert selected MOs into an orbkit-readable
# qc-object
#--------------------------------------------
qc_select = qc.todict()
qc_select['mo_spec'] = []
for k in range(len(qc.mo_spec)):
  if k+1 in selected_MO:
    qc_select['mo_spec'].append(qc.mo_spec[k])


#--------------------------------------------
# Check for open shell
#--------------------------------------------
spin_polarized = False
for i in range(0,len(qc.mo_spec)):
  if "_b" in qc.mo_spec[i]['sym']:                      #: Orbkit classifies spin down/up orbitals with _b / _a in the symmetry
    spin_polarized = True
    break
    
if (spin_polarized):
  print ("")
  print ("Orbitals read successfully. Found spin!")
else:
  print ("")
  print ("Orbitals read successfully. No spin.")
  
  
#--------------------------------------------
# Coefficients:
#   calculated and written out if option is set
#--------------------------------------------
if (print_coeff == True or print_coeff_only == True):
  start_time = time.time()
  mo_coefficients.Get_MO_Coefficients(qc,                       #: dev in mo_coefficients.py
                                      print_coeff_only, 
                                      spin_polarized, 
                                      pointsPerEv, 
                                      sigma,
                                      E_Fermi,
                                      emin, emax,
                                      selected_MO)
  elapsed_time[2] += time.time() - start_time                   #: time till finished with the coefficients







#-----------------------------------------------------------
# The actual projection starts here:
#
# :: two integrals are solved for the projection (in latex
#    notation): 

#    [1] c_{i,l}(R_0) = \sum_m  \int_0^{R_0} r^2 | \varphi_{i,lm}(r) |^2 dr
#    with
#    [2] \varphi_{i,lm}(r) = \int Y_{lm}(\theta,\phi)* \psi_i(r,\theta,\phi) d\theta d\phi

# :: for solving the integrals cubature is utilized
# :: cubature takes the function for integration as python 
#    def-functions
# :: the following two python functions define the functions
#    to integrate
#
#-----------------------------------------------------------


#-----------------------------------------------------------
# function [2], angular part, to integrate (see above)
#-----------------------------------------------------------
def func(x_array,*args):

  # numpy array: x_array                    :: shape(nr_grid_points,2); column 0 = theta; column 1 = phi
  # boolean:     args[0] = vectorized       :: if true -> cubature uses vector algorithm
  # boolean:     args[1] = calc_mo          :: if true -> Orbkit calculates indiv. Orbitals
  # float:       args[2] = r[ir]            :: contains the r-grid point
  # int:         args[3] = l                :: contains l-quantum number
  # int:         args[4] = m                :: contains m-quantum number
  # float:       args[5] = center_shift[x]  :: contains center_shift -> x
  # float:       args[6] = center_shift[y]  :: contains center_shift -> x
  # float:       args[7] = center_shift[z]  :: contains center_shift -> x
  # int:         args[8] = numproc          :: number of processors used by orbkit to create grid
  # boolean:     args[9] = energy_range_is_set :: only specific MOs are calculated
  # list:       args[10] = selected_MO      :: specific MO list 
  
  #energy_range_is_set = args[9]
  #selected_MO = args[10]
  
  
  #------------------------------
  # Initializing integration grid
  #---
  r     = args[2]                                       #: r as parameter
  theta = numpy.array(x_array[:,0], copy=True)          #: integration over theta [xarray column 0]
  phi   = numpy.array(x_array[:,1], copy=True)          #: integration over phi   [xarray column 1]
  
  #-------------------------------------------
  # Set grid used by orbkit (in cartesian coords)
  #---
  grid.x = numpy.array(r * numpy.sin(theta) * numpy.cos(phi), copy=True) + args[5]
  grid.y = numpy.array(r * numpy.sin(theta) * numpy.sin(phi), copy=True) + args[6]
  grid.z = numpy.array(r * numpy.cos(theta), copy=True) + args[7]
  grid.is_initialized = True  
  
  #--------------------
  # get MOs from Orbkit
  #---
  #print ("Will try to use: ", args[8], "processors.") 
  # <- unfortunately no gain in using more cores / does not work
  if (energy_range_is_set):
    #orb, mo_info = extras.calc_mo(qc, selected_MO, drv=None)       # <- this seems to be much slower
    orb = core.rho_compute(qc_select,                               #    even slower than core.rho_compute for all orbitals...
                           calc_mo=args[1],
                           slice_length=1e4,
                           drv=None,
                           numproc=args[8])
  else:
    orb = core.rho_compute(qc,
                           calc_mo=args[1],
                           slice_length=1e4,
                           drv=None,
                           numproc=args[8])

  #----------------------------------------------------
  # Calculates real and imaginary parts of function [2]
  #---
  real_out = numpy.real( sh.sh(args[3],args[4],theta,phi) * orb * numpy.sin(theta))
  imag_out = numpy.imag( sh.sh(args[3],args[4],theta,phi) * orb * numpy.sin(theta))
  
  out = numpy.append(real_out, imag_out, 0)                # separate integration of real and imag. parts
  
  return out.transpose()                                   # Orbkit saves orbital function values opposite to
                                                           #             Cubature (func,npt) --> (npt,func)




#-------------------------------------------------------------
# function [1], radial part, to integrate (see above)
#-------------------------------------------------------------
def func2(x_array, *args):
  r = numpy.array(x_array[:,0], copy=True)                 #: x_array stores the grid of the integration variable; x_array[:,0] = first variable, x_array[:,1] = second variable ...
  
  ndim = 2                                                 #: Specifies the number of dimensions being integrated
  
  if (energy_range_is_set):
    fdim = 2*len(qc_select['mo_spec'])                              #: Specifies the length of the output vector of func
  else:
    fdim = 2*len(qc.mo_spec)
  
  xmin = numpy.array([ 0., 0.],dtype=float)                #: Specifies the minimum integration limit for each variable
  xmax = numpy.array([numpy.pi, 2.*numpy.pi],dtype=float)  #: Specifies the maximum integration limit for each variable
  abserr = 1e-3                                            #: Specifies the absolute error: |error| < abserr requested (If zero, it will be ignored.)
  relerr = 1e-3                                            #: Specifies the relative error: |error| < relerr*|integral| requested (If zero, it will be ignored.)
  vectorized = True                                        #: If True, uses a vector of points in cubature, instead of a single point calculation. (Much faster!)
  calc_mo = True                                           #: If True, lets Orbkit calculate the individual orbitals

  #---------------------------------------
  # Calculate the integral over theta, phi
  #                   for all entries in r
  #---
  for ir in range(0,len(r)):
    philm_r,philm_error_r = cubature(func, ndim, fdim, xmin, xmax, 
                                     args=(vectorized,calc_mo, r[ir], 
                                           args[2], args[3], args[4], args[5], args[6], args[7]), 
                                     adaptive='h', abserr=abserr, relerr=relerr, 
                                     norm=0, maxEval=0, vectorized=vectorized)
    if ir == 0:
      philm = numpy.array(philm_r, copy=True)
    else:
      philm = numpy.vstack((philm,philm_r))
      
  #---------------------------------
  # Return to actual complex numbers
  #---
  philm_compl = numpy.zeros([len(r),fdim/2],dtype=numpy.complex)
  for i in range(0,fdim/2):
    philm_compl[:,i] = philm[:,i] + 1.j*philm[:,i+(fdim/2)] #len(qc.mo_spec)]
  
  #---------------------------------
  # Caclulate absolute square of phi
  #---
  phi_abs = numpy.conj(philm_compl)* philm_compl
  
  out = r**2. * numpy.real(phi_abs.transpose())
  return out.transpose()



#------------------------------------------------------------
# Cubature specifics for integration over r
#------------------------------------------------------------
from cubature import cubature

ndim = 1                                 #: Specifies the number of dimensions being integrated
if energy_range_is_set:
  fdim = len(qc_select['mo_spec'])
else:
  fdim = len(qc.mo_spec)                 #: Specifies the length of the output vector of func
xmin = numpy.array([ 0.],dtype=float)    #: Specifies the minimum integration limit for each variable
xmax = numpy.array([cutoff_r],dtype=float)    #: Specifies the maximum integration limit for each variable
abserr = 1e-3                            #: Specifies the absolute error: |error| < abserr requested (If zero, it will be ignored.)
relerr = 1e-3                            #: Specifies the relative error: |error| < relerr*|integral| requested (If zero, it will be ignored.)
vectorized = True                        #: If True, uses a vector of points in cubature, instead of a single point calculation. (Much faster!)
calc_mo = True                           #: If True, lets Orbkit calculate the individual orbitals


#---------------------------
# Integration till lmax = 6
# ---
start_time = time.time()
lmax = 6
print("")
print("I am solving integrals now...")

for l in range(0,lmax+1):
  
  sum_c = numpy.zeros(fdim)
    
  for m in range(-l,l+1):

    c_il,c_il_error = cubature(func2, ndim, fdim, xmin, xmax, 
                           args=(vectorized,calc_mo,l,m,
                                 center_shift[0],center_shift[1],center_shift[2], 
                                 numproc), 
                           adaptive='h', abserr=abserr, relerr=relerr, 
                           norm=0, maxEval=0, vectorized=vectorized)
    if l == 0:
      sum_c = c_il
    if l > 0:
      sum_c += c_il
      
  
  if l == 0:
    all_c = numpy.array(sum_c, copy = True)
  else:
    all_c = numpy.vstack((all_c, sum_c))
  
  print ("Projection completed for: l=%i" % l)
                                                        #: all_c contains all coefficients for l=0-6 for a given
                                                        #  molecular orbital
                                                        #: all_c[l,mo] 
  

print ("")
print ("Solved Integrals and will write out stuff now.")
elapsed_time[0] = time.time() - start_time
start_time = time.time()







#---------------------------------------------------------------
# Integration is finshed. From here on the files are written out
# and the discrete orbital energies are smeared out by Gaussian
# functions for better comparison to solid state DOS. Both,
# smeared and unsmeared, data sets are written out.
#---------------------------------------------------------------


#-------------------------------
# Returns a string for given l
#-------------------------------
def l_to_string(l):
  switcher = {
    0: "s",
    1: "p",
    2: "d",
    3: "f",
    4: "g",
    5: "h",
    6: "i",
    7: "j",
  }
  return switcher.get(l, " ")

#-------------------------------
# Function for writing output
#-------------------------------
def writeOutSmearedCoef(output_file, filename_ext, np_out):
  headerstring = ' Energy [eV]      C-s         C-p         C-d         C-f         C-g         C-h         C-i'
  numpy.savetxt(output_file+filename_ext, np_out, fmt='%16.8f  %.8f  %.8f  %.8f  %.8f  %.8f  %.8f  %.8f', header=headerstring)

#-------------------------------------
# Discrete values are written here
#---
outputstream = open(output_file+".discrete.dat", "w+")
print('#   Energy [a.u.]          Energy [eV]     ',end="", file=outputstream)
for l in range(0,lmax+1):
  if l == lmax:
    print('C-%s      sum_C       MO' % (l_to_string(l)), file=outputstream)
    break
  else:
    print('C-%s         ' % (l_to_string(l)), end="", file=outputstream)

en = numpy.zeros(len(all_c[0,:]))

for i_mos in range(0,len(all_c[0,:])):
  for l in range(0, lmax+1):
    if l == lmax:
      print ("%.8f  %.8f  %s" % (all_c[l, i_mos], all_c[:,i_mos].sum(), qc.mo_spec[selected_MO[i_mos]-1]['sym'] ), file=outputstream)
    elif l == 0:
      print ("%16.8f     %16.8f     %.8f  " % (qc.mo_spec[selected_MO[i_mos]-1]['energy'], qc.mo_spec[selected_MO[i_mos]-1]['energy']*27.21138602, all_c[l, i_mos]), end="", file=outputstream)
      en[i_mos] = qc.mo_spec[selected_MO[i_mos]-1]['energy']
    else:  
      print ("%.8f  " % all_c[l, i_mos], end="", file=outputstream)
outputstream.close()


#----------------------------------------------
# Values smeared by Gaussians are written here
#---
xmin = emin                                     #: 
xmax = emax                                     #: 
ipolpt = int((xmax - xmin)*pointsPerEv)+1       #: number of grid points
xstep = (xmax - xmin)/float(ipolpt)             #: stepsize between grid points
gx = numpy.zeros((ipolpt+1,lmax+1))             #: Gaussian function with ipolpt discrete entries
x = numpy.zeros(ipolpt+1)                       #: ipolpt number of x-values at which gx is evaluated



if not spin_polarized:
  #--------------------------------------
  # create files for closed shell systems
  #---
  #--------------------------------------
  # Computing the Gaussians (l-selective)
  #---

  for i in xrange(0,ipolpt+1):
    x[i] = xmin + xstep*float(i)                                #: x-value is calculated for i-th step
  
  for i_mos in xrange(0,len(all_c[0,:])):                      #: sum over all MOs
    for l in xrange(0, lmax+1):                                #: sum over all l
      gx[:,l] += all_c[l,i_mos] * (1./(sigma*numpy.sqrt(2.*numpy.pi))) * numpy.exp(-(1./(2.*sigma**2.))*(x[:] - 27.21138602*qc.mo_spec[selected_MO[i_mos]-1]['energy'])**2.)
                                                                #: gaussian function centred at orbital 
                                                                #  energy (qc.mo_spec[i_mos]['energy'])
                                                                #  of orbital i_mos with angular quantum
                                                                #  number l


  #-----------------------------------
  # smeared function gx is written out
  #---
  writeOutSmearedCoef(output_file, '.smeared.dat', numpy.column_stack((x-E_Fermi,gx)))


  print ("Output saved to %s and %s" % (output_file+".discrete.dat", output_file+ ".smeared.dat"))
  
else:
  #-------------------------------
  # for open shell systems: alpha
  #---
  
  #-------------------------------------------
  # Compute Gaussians (l- and alpha-selective)
  #---
  for i in range(0,ipolpt+1):
    x[i] = xmin + xstep*float(i)
  
  for i_mos in range(0,len(all_c[0,:])):
    if "_a" in qc.mo_spec[selected_MO[i_mos]-1]["sym"]:                      #: select only alpha-spin orbitals
      for l in range(0, lmax+1):
        gx[:,l] += all_c[l,i_mos] * (1./(sigma*numpy.sqrt(2.*numpy.pi))) * numpy.exp(-(1./(2.*sigma**2.))*(x[:] - 27.21138602*qc.mo_spec[selected_MO[i_mos]-1]['energy'])**2.)
        #print (gx[:,l])
                                                                #: gaussian function centred at orbital 
                                                                #  energy (qc.mo_spec[i_mos]['energy'])
                                                                #  of orbital i_mos with angular quantum
                                                                #  number l

  #-------------------------
  # write x and gx to file 
  #---
  writeOutSmearedCoef(output_file, '.smeared.a.dat', numpy.column_stack((x-E_Fermi,gx)))
  
  


  #-------------------------------
  # for open shell systems: beta
  #---
  gx = numpy.zeros((ipolpt+1,lmax+1))                           #: initialze gx Gaussian function
  x = numpy.zeros(ipolpt+1)                                     #: the same for x (i.p. not necessary)
  
  #-------------------------------------------
  # Compute Gaussians (l- and beta-selective)
  #---
  for i in range(0,ipolpt+1):
    x[i] = xmin + xstep*float(i)
  
  for i_mos in range(0,len(all_c[0,:])):
    if "_b" in qc.mo_spec[selected_MO[i_mos]-1]["sym"]:                      #: select only beta-spin orbitals
      for l in range(0, lmax+1):
        gx[:,l] += all_c[l,i_mos] * (1./(sigma*numpy.sqrt(2.*numpy.pi))) * numpy.exp(-(1./(2.*sigma**2.))*(x[:] - 27.21138602*qc.mo_spec[selected_MO[i_mos]-1]['energy'])**2.)
        #print (gx[:,l])
  
  #-------------------------
  # write x and gx to file 
  #---
  writeOutSmearedCoef(output_file, '.smeared.b.dat', numpy.column_stack((x-E_Fermi,gx)))


  print ("Output saved to %s, %s and %s" % (output_file+".discrete.dat", output_file+ ".smeared.a.dat", output_file+ ".smeared.b.dat"))

elapsed_time[1] += time.time() - start_time
   
#-----------------------------
# Done writing
# Shows elapsed time and ends
#---
print ()
print ("Elapsed Time")
print ("Solving integrals   : %.2f s" % elapsed_time[0])
print ("Writing to the disc : %.2f s" % elapsed_time[1])
if (print_coeff):
  print ("MO coefficients     : %.2f s" % elapsed_time[2])
print ("")
print ("All done. Sweet.")
print ("")
